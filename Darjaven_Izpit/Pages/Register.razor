@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@page "/Register"

<PageTitle>Login</PageTitle>

<head>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous">
<link rel="stylesheet" href="/css/register_page.css"/>
</head>
<body id="login-body">
<div id="loginFormDiv">
    <div id="LoginTitleLabelDiv">
        <label id="LoginTitleLabel">Register</label>
    </div>
    
    <form id="loginForm" method="post">
        <div id="usernameLoginDiv">
            <label id="usernameLoginLabel">Username: </label>
            <input id="usernameLoginInput" type="text" name="username" @bind-value="Username" required/>
        </div>

        <div id="passwordLoginDiv">
            <label id="passwordLoginLabel">Password: </label>
            <input id="passwordLoginInput" type="password" name="password" @bind-value="Password" required/>
        </div>
        
        <div id="firstNameLoginDiv">
                    <label id="firstNameLoginLabel">First Name: </label>
                    <input id="firstNameLoginInput" type="text" name="firstName" @bind-value="FirstName" required/>
                </div>
        
        <div id="lastNameLoginDiv">
            <label id="lastNameLoginLabel">Last Name: </label>
            <input id="lastNameLoginInput" type="text" name="lastName" @bind-value="LastName" required/>
        </div>
        

        <button id="loginButtonIndex" class="btn btn-primary" @onclick="SendInfo">Register</button>
        <div id="registerLinkDiv">
            <button @onclick="RegisterRedirect" id="registerLink">Already have an account? Login here!</button>
        </div>
        
    </form>
</div>
</body>

<footer>
    
</footer>

@code
{
    private string Username {get;set;}
    private string Password { get; set; }
    private string FirstName { get; set; }
    private string LastName { get; set; }

    public void RegisterRedirect()
    {
        NavigationManager.NavigateTo("/");
    }
    
    private async Task SendInfo()
    {
        
        var response = await SendLoginRequest();

        
    }

    private async Task<HttpResponseMessage> SendLoginRequest()
    {
        var httpClient = new HttpClient();
        var loginData = new Dictionary<string, string>
        {
            { "username", Username },
            { "password", Password },
            {"firstName",FirstName},
            {"lastName",LastName}
        };

        Console.WriteLine(Username);
        
        try
        {
            return await httpClient.PostAsync("https://localhost:7130/Register", new FormUrlEncodedContent(loginData));
        }
        catch (HttpRequestException ex)
        {

            throw new Exception($"Error sending login request: {ex.Message}");
        }


    }
    
    /// <summary>
    /// Redirecting stuff
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var user = HttpContextAccessor.HttpContext.User;
            
            if (user.Identity.IsAuthenticated && NavigationManager.Uri.Contains("/") && user.IsInRole("user"))
            {
                NavigationManager.NavigateTo("/UserProfile", forceLoad: true);
            }

        }
    }
}
