@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@using Darjaven_Izpit.Controller.DB_Work
@using System.Net.Http;
@page "/UserProfile"

@{
    DB_Data_Fetch dbDataFetch = new DB_Data_Fetch();
    Collections collections = new Collections();

    var users = collections.GetUsersList();
    var events = collections.GetEventList();
    var tickets = collections.GetTicketList();
    string id = dbDataFetch.FetchId(HttpContextAccessor.HttpContext.User.Identity.Name);

}

<CascadingAuthenticationState>
    <AuthorizeView Roles="user">
        <Authorized>
            <head>
                <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous">
                <link href="css/u_profile_page.css" rel="stylesheet" preload/>
            </head>
            
            <body id="user-body">
            <div id="userSideBar">
                
                <div>
                    <img id="userProfilePfpPlaceHolder" src="images/ProfilePicturePlaceHolder.png"/>
                </div>
                <div>
                    <hr id="sideBarLine"/>
                </div>
                <div id="userInfoDiv">
                    <label id="usernameIdPlaceholder">ID: 0</label>
                    <label id="usernamePlaceholder">@HttpContextAccessor.HttpContext.User.Identity.Name</label>
                </div>
                    
            </div>
            
            <div id="crudOperationsDiv">
                <button type="button" id="crudOperationsButton" @onclick="ShowModal" class="btn btn-info">CRUD</button>
            </div>
            
            <form id="buttonForm" method="post">
                <button class="btn btn-danger" id="logoutButton">Logout</button>
            </form>
            
            </body>
        </Authorized>
    </AuthorizeView>
    <AuthorizeView Roles="admin">
            <head>
              <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous">
              <link href="css/u_profile_page.css" rel="stylesheet" preload/>
            </head>
                    
            
            <body id="user-body">
            <div id="userSideBar">
                
                    
                <div>
                    <img id="userProfilePfpPlaceHolder" src="images/ProfilePicturePlaceHolder.png"/>
                </div>
                <div>
                    <hr id="sideBarLine"/>
                </div>
                <div id="userInfoDiv">
                    <label id="usernameIdPlaceholder">ID: 0</label>
                    <label id="usernamePlaceholder">@HttpContextAccessor.HttpContext.User.Identity.Name</label>
                </div>
                    
            </div>
            
            
            <div id="crudOperationsDiv">
                <button type="button" id="crudOperationsButton" @onclick="ShowModal" class="btn btn-info">CRUD</button>
            </div>
            
            
            
            <form id="buttonForm" method="post">
                <button class="btn btn-danger" id="logoutButton">Logout</button>
            </form>
            
            
            <div>
                <!-- User Table-->
                            
                            
                            <div id="usersTable">
                                <label id="userstableLabel">Users</label>
                                <table class="table" id="tableusers">
                                    <thead>
                                    <tr>
                                        <th>Username</th>
                                        <th>Password</th>
                                        <th>First Name</th>
                                        <th>Last Name</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    @foreach (var item in users)
                                    {
                                        <tr>
                                            <td>@item.Username</td>
                                            <td>@item.Password</td>
                                            <td>@item.FirstName</td>
                                            <td>@item.LastName</td>
                                        </tr>
                                    }
                                    <!-- Add more rows as needed -->
                                    </tbody>
                                </table>
                
                            </div>
                            
                             <!-- Event Table-->
                            
                            <div id="eventTable">
                                <label id="eventtableLabel">Events</label>
                                <table class="table" id="tableevents">
                                    <thead>
                                    <tr>
                                        <th>Event Name</th>
                                        <th>Description</th>
                                        <th>Date</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    @foreach (var item in events)
                                    {
                                        <tr>
                                            <td>@item.Name</td>
                                            <td>@item.Description</td>
                                            <td>@item.Date.ToString("dd-MM-YYYY")</td>
                                        </tr>
                                    }
                                    <!-- Add more rows as needed -->
                                    </tbody>
                                </table>
                            
                            </div>
                            
                            
                             <!-- Ticket Table-->
                            
                            
                            <div id="ticketTable">
                                                        <label id="tickettableLabel">Tickets</label>
                                                        <table class="table" id="tabletickets">
                                                            <thead>
                                                            <tr>
                                                                <th>ID</th>
                                                                <th>Event Name</th>
                                                                <th>Ticket Owner</th>
                                                            </tr>
                                                            </thead>
                                                            <tbody>
                                                            @foreach (var item in tickets)
                                                            {
                                                                <tr>
                                                                    <td>@item.Id.ToString()</td>
                                                                    <td>@item.Eventname</td>
                                                                    <td>@item.Userown</td>
                                                                </tr>
                                                            }
                                                            <!-- Add more rows as needed -->
                                                            </tbody>
                                                        </table>
                                        
                                                    </div>
            </div>
            
            
            
            <!-- Modal CRUD-->
            
            <div class="modal" tabindex="-1" role="dialog" style="@($"display: {(showModal ? "block" : "none")};")">
                <div class="modal-dialog" role="document">
                    <div class="modal-content" id="crudModal">
                        <div class="modal-header">
                            <h5 class="modal-title">Modal title</h5>
                        </div>
                        <div class="modal-body">
                            
                            
                            <div id="crudUserOP">
                                <label id="modalUserCreateLabel">Users: </label>
                                <button type="button" id="createButton" class="btn btn-success" @onclick="ShowCreateModal">Create</button>
                                <button type="button" id="deleteButton" class="btn btn-danger" @onclick="DeleteUser">Delete</button>
                                <input @bind="username"/>
                            </div>
                            
                            <div id="crudEventOP">
                                <label id="modalUserCreateLabel">Events: </label>
                                <button type="button" id="createButton" class="btn btn-success" @onclick="ShowCreateModal">Create</button>
                                <button type="button" id="deleteButton" class="btn btn-danger" @onclick="DeleteEvent">Delete</button>
                                <input @bind="uEvent"/>
                            </div>
                            
                            <div id="crudTicketOP">
                                <label id="modalUserCreateLabel">Tickets: </label>
                                <button type="button" id="createButton" class="btn btn-success" @onclick="ShowCreateModal">Create</button>
                                <button type="button" id="deleteButton" class="btn btn-danger" @onclick="DeleteTicket">Delete</button>
                                <input @bind="ticket"/>
                            </div>
                            
                            
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-primary">Save changes</button>
                            <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="HideModal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Modal CRUD-->
                        
            
            <!-- Modal Create-->
                        
            <div class="modal" tabindex="-1" role="dialog" style="@($"display: {(showCreateModal ? "block" : "none")};")">
                <div class="modal-dialog" role="document">
                    <div class="modal-content" id="createModal">
                        <div class="modal-header">
                            <h5 class="modal-title">Modal title</h5>
                        </div>
                        <div class="modal-body">
                                
                            <div id="createModalUsernameDiv">
                                <label>Username: </label>
                                <input name="username"  @bind-value="createUsername" type="text" id="createModalUsernameInput"/>
                            </div>
                            <div id="createModalPasswordDiv">
                                <label>Password: </label>
                                <input name="password" @bind-value="createPassword" type="password" id="createModalPasswordInput"/>
                            </div>
                                  
                                  
                                  
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-success" @onclick="CreateUser">Create</button>
                            <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="HideCreateModal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
                        
            <!-- Modal Create-->
            
            
            <!-- Modal Update-->
                                    
            <div class="modal" tabindex="-1" role="dialog" style="@($"display: {(showUpdateModal ? "block" : "none")};")">
                <div class="modal-dialog" role="document">
                    <div class="modal-content" id="createModal">
                        <div class="modal-header">
                            <h5 class="modal-title">Modal title</h5>
                        </div>
                        <div class="modal-body">
                    
                            <div id="createModalUsernameDiv">
                                <label>Username: </label>
                                <input name="username" @bind-value="updateUsername" type="text" id="createModalUsernameInput"/>
                            </div>
                            <div id="createModalPasswordDiv">
                                <label>Password: </label>
                                <input name="password" @bind-value="updatePassword" type="password" id="createModalPasswordInput"/>
                            </div>
                      
                      
                      
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-warning" @onclick="UpdateUser">Update</button>
                            <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="HideUpdateModal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
                                    
            <!-- Modal Update-->
            
            
            </body>
            
            
            <footer></footer>
                    
                    
                    
    </AuthorizeView>
</CascadingAuthenticationState>


@code {
    private string username { get; set; }
    private string uEvent { get; set; }
    private string ticket { get; set; }
    
    private string createUsername { get; set; }
    private string createPassword { get; set; }
    
    private string updateUsername { get; set; }
    private string updatePassword { get; set; }


    public void DeleteUser()
    {
        DB_Delete delete = new DB_Delete();
        delete.DeleteUser(username);
    }
    public void DeleteEvent()
    {
        DB_Delete delete = new DB_Delete();
        delete.DeleteEvent(uEvent);
    }
    
    public void DeleteTicket()
    {
        DB_Delete delete = new DB_Delete();
        delete.DeleteTicket(ticket);
    }
    
    public void CreateUser()
    {
        DB_Create create = new DB_Create();

        if (createUsername == null || createPassword == null)
        {
            return;
        }
        
        try
        {
            create.CreateUser(createUsername,createPassword,"A","A");
            HideCreateModal();
            createUsername = "";
            createPassword = "";
        }
        catch (Exception ex)
        {
            Console.WriteLine("An error occured read below: ");
            Console.WriteLine(ex.Message);
            throw;
        }
        
    }
    
    
    public void UpdateUser()
    {
        DB_Update update = new DB_Update();
        DB_Validation validation = new DB_Validation();

        if (updateUsername == null || updatePassword == null)
        {
            return;
        }
        
        try
        {
            if (validation.ValidateUserAcc(HttpContextAccessor.HttpContext.User.Identity.Name,updatePassword) == true)
            {
                update.UpdateUsername(updateUsername,HttpContextAccessor.HttpContext.User.Identity.Name);
                HideUpdateModal();
                LogoutRequest();
            }
            else if (validation.ValidateUserAcc(HttpContextAccessor.HttpContext.User.Identity.Name,updatePassword) == false)
            {
                return;
            }
            
        }
        catch (Exception ex)
        {
            Console.WriteLine("An error occured read below: ");
            Console.WriteLine(ex.Message);
            throw;
        }
        
    }
    
    
    
    
    bool showModal = false;
    bool showCreateModal = false;
    bool showUpdateModal = false;

    void ShowModal()
    {
        showModal = true;
    }

    void ShowCreateModal()
    {
        showCreateModal = true;
    }

    void ShowUpdateModel()
    {
        showUpdateModal = true;
    }
    
    void HideModal()
    {
        showModal = false;
    }
    
    void HideCreateModal()
    {
        showCreateModal = false;
    }

    void HideUpdateModal()
    {
        showUpdateModal = false;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var user = HttpContextAccessor.HttpContext.User;
            
            if (!user.Identity.IsAuthenticated && NavigationManager.Uri.Contains("/UserProfile"))
            {
                NavigationManager.NavigateTo("/", forceLoad: true);
            }

        }
    }
    
    protected override void OnInitialized()
    {
        updateUsername = HttpContextAccessor.HttpContext.User.Identity.Name;
    }
    
    private async Task LogoutRequest()
    {
        
        var response = await SendLoginRequest();

        
    }
    
    private async Task<HttpResponseMessage> SendLoginRequest()
    {
        var httpClient = new HttpClient();
        
        try
        {
            return await httpClient.PostAsync("https://localhost:7130/UserProfile", new StringContent(""));
        }
        catch (HttpRequestException ex)
        {

            throw new Exception($"Error sending login request: {ex.Message}");
        }


    }

}